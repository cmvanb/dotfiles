#-------------------------------------------------------------------------------
# lf File Explorer Configuration
#-------------------------------------------------------------------------------

# Settings
#-------------------------------------------------------------------------------

# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Enable icons
set icons

# NOTE: You can't use environment vars in lfrc ;(
# Custom previewer
set previewer ~/.local/scripts/terminal-preview.sh

# Key mappings
#-------------------------------------------------------------------------------

# Clear defaults
map <c-y>
map <c-e>
map c
map d
map f
map F
map H
map L
map m
map M
map p
map r
map t
map u
map v
map w
map x
map y
map z
map "!"
map "$"
map "%"
map "&"
map ";"
map ","
map "'"
map '"'

# Navigation.
map h updir
map j down
map k up
map l open

# Enter lf commands.
map ":" read

# Enter shell commands.
map <enter> shell

# Search.
map "/" search
map "?" search-back
map n search-next
map N search-prev

# Quit
map <esc> quit
map q quit

# Toggle hidden files.
map . set hidden!

# Open in editor.
map e $edit $f

# NOTE: You can't use environment vars in lfrc ;(
# Open in pager.
map i $~/.local/scripts/terminal-preview.sh $f | less -R

# Custom open command.
cmd open $xdg-open $f

# Configuration graveyard
#-------------------------------------------------------------------------------

# Execute current file (must be executable).
# map x $$f
# map X !$f

# Dedicated keys for file opener actions.
# map o &xdg-open $f

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
# cmd extract ${{
#     set -f
#     case $f in
#         *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
#         *.tar.gz|*.tgz) tar xzvf $f;;
#         *.tar.xz|*.txz) tar xJvf $f;;
#         *.zip) unzip $f;;
#         *.rar) 7z x $f;;
#         *.7z) 7z x $f;;
#     esac
# }}
#
# # compress current file or selected files with tar and gunzip
# cmd tar ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     tar czf $1.tar.gz $1
#     rm -rf $1
# }}
#
# # compress current file or selected files with zip
# cmd zip ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     zip -r $1.zip $1
#     rm -rf $1
# }}
